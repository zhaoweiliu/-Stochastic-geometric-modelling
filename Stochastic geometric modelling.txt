
double AR = 0.2; // shape parameter
double vol = 0; // Ellipsoid volume accumulation
int i = 2;
double l_semi0 = 0.623; // semi-major axis
double fai = 0.01; // porosity
model.component().create("comp1", true); // three-dimensional micromodule
model.component("comp1").geom().create("geom1", 3);
model.component("comp1").geom("geom1").lengthUnit("cm"); // units
model.component("comp1").geom("geom1").selection().create("csel1", "CumulativeSelection"); // CumulativeSelection1

model.component("comp1").geom("geom1").create("blk1", "Block"); // cuboid
with(model.geom("geom1").feature("blk1"));
  set("size", new double[]{1, 1, 1});
  set("pos", new double[]{0, 0, 0});
endwith();

model.component("comp1").geom("geom1").create("ell1", "Ellipsoid"); // spheroid
with(model.component("comp1").geom("geom1").feature("ell1"));
  double l_semi1 = l_semi0; // major axis length
  set("semiaxes", new double[]{l_semi1, l_semi1*AR, l_semi1*AR});
  double x1 = Math.random();
  double y1 = Math.random();
  double z1 = Math.random();
  set("pos", new double[]{x1, y1, z1}); // position of the spheroid
endwith();
vol = 4/3*3.1415926*l_semi1*l_semi1*AR*l_semi1*AR; // volume of the first spheroid

model.component("comp1").geom("geom1").create("r1", "Rotate"); // Creating a rotating node
with(model.component("comp1").geom("geom1").feature("r1").selection("input"));
  set("ell1");
endwith();
with(model.component("comp1").geom("geom1").feature("r1"));
  set("specify", "eulerang"); // The rotation mode is Euler Angle
  set("pos", new double[]{x1, y1, z1}); // The center of rotation is the center of ellipsoid
  set("eulerang", new double[]{Math.random()*180, Math.random()*180, Math.random()*180}); // Rotation Angle is a random number in [0,180]
endwith();
model.component("comp1").geom("geom1").feature("r1").set("contributeto", "csel1");
//
while (vol < fai) { // If the cumulative volume of ellipsoid is greater than 0.1, it will jump out of the cycle
  model.component("comp1").geom("geom1").create("ell"+i, "Ellipsoid"); //生成椭球体 create spheroid
  with(model.component("comp1").geom("geom1").feature("ell"+i));
    double l_semi = l_semi0; // Initialize the long axis length
    set("semiaxes", new double[]{l_semi, l_semi*AR, l_semi*AR});
    double x = Math.random();
    double y = Math.random();
    double z = Math.random();
    set("pos", new double[]{x, y, z}); // Specifies the center position of the ellipsoid
  endwith();
  
  model.component("comp1").geom("geom1").create("r"+i, "Rotate"); // Creating a rotating node
  with(model.component("comp1").geom("geom1").feature("r"+i).selection("input"));
    set("ell"+i);
  endwith();
  with(model.component("comp1").geom("geom1").feature("r"+i));
    set("specify", "eulerang"); // The rotation mode is Euler Angl
    set("pos", new double[]{x, y, z}); // Set the center of rotation to the center of the ellipsoid
    set("eulerang", new double[]{Math.random()*180, Math.random()*180, Math.random()*180}); // Rotation Angle is a random number in [0,180]
  endwith();
  // Cumulative selection is different from union
  
  model.component("comp1").geom("geom1").create("Uni1", "Union"); // creat a union set 
  model.component("comp1").geom("geom1").feature("Uni1").selection("input").named("csel1");
  //model.component("comp1").geom("geom1").feature("r"+i).set("contributeto", "csel1");
  model.component("comp1").geom("geom1").create("inte1", "Intersection");
  with(model.component("comp1").geom("geom1").feature("inte1").selection("input"));
    set("Uni1", "r"+i);
  endwith();
  
  model.component("comp1").geom("geom1").runPre("fin"); // Neccessary or the "inte1" can not be recognized
  
  
  //Boolean b = model.component("comp1").geom("geom1").obj("inte1").exists();
  //String b = model.component("comp1").geom("geom1").feature("inte1").getType();
  //int b = model.component("comp1").geom("geom1").obj("inte1").getSDim();
  int b = model.component("comp1").geom("geom1").obj("inte1").getNDomains();
  if (b == 0) {
    model.component("comp1").geom("geom1").feature("r"+i).set("contributeto", "csel1");
    model.component("comp1").geom("geom1").feature().remove("inte1");
    model.component("comp1").geom("geom1").feature().remove("Uni1");
    
  } else {
    model.component("comp1").geom("geom1").feature().remove("ell"+i);
    model.component("comp1").geom("geom1").feature().remove("r"+i);
    model.component("comp1").geom("geom1").feature().remove("inte1");
    model.component("comp1").geom("geom1").feature().remove("Uni1");
    continue;
  }
  vol = 4/3*3.1415926*l_semi*l_semi*AR*l_semi*AR+vol;
  i = i+1;
}

model.component("comp1").geom("geom1").create("dif1", "Difference"); // difference set
with(model.component("comp1").geom("geom1").feature("dif1").selection("input"));
  set("blk1");
endwith();
model.component("comp1").geom("geom1").feature("dif1").selection("input2").named("csel1");

model.component("comp1").geom("geom1").create("blk2", "Block"); // cuboid
with(model.geom("geom1").feature("blk2"));
  set("size", new double[]{1, 1, 1});
  set("pos", new double[]{0, 0, 0});
endwith();

model.component("comp1").geom("geom1").run("fin"); // Form a union


model.component("comp1").physics().create("ht", "HeatTransfer", "geom1"); // Added solid heat transfer physics field

model.component("comp1").physics("ht").create("temp1", "TemperatureBoundary", 2); // Create temperature boundary condition 1
with(model.component("comp1").physics("ht").feature("temp1"));
  set("T0", "273.15[K]");
endwith();
model.component("comp1").physics("ht").create("temp2", "TemperatureBoundary", 2); // Create temperature boundary condition 2
with(model.component("comp1").physics("ht").feature("temp2"));
  set("T0", "323.15[K]");
endwith();

model.component("comp1").mesh().create("mesh1"); // Create mesh
model.study().create("std1"); // Creat study
model.study("std1").create("stat", "Stationary"); // steady-state study

//model.result().numerical().create("av1", "AvSurface"); // Create an average in derived values
//with(model.result().numerical("av1"));
//set("intvolume", true);
//set("expr", new String[]{"comp1.ht.ndflux"}); // The desired quantity is the normal conduction heat flux
//set("descr", new String[]{"\u6cd5\u5411\u4f20\u5bfc\u70ed\u901a\u91cf"});
//set("unit", new String[]{"W/m^2"});
//endwith();




String s = String.valueOf(vol);
alert((s));

